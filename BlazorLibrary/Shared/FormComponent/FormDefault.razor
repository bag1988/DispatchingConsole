@inject ILogger<FormDefault> _logger;
<form @ref="form" id="@FormID" @onsubmit="SendSumbit" @onsubmit:preventDefault="true" @onsubmit:stopPropagation="true" data-enhance>
    @if (ChildContent != null)
    {
        @ChildContent(IsProcessing)
    }
</form>

@code {
    [Parameter]
    public RenderFragment<bool>? ChildContent { get; set; }

    [Parameter]
    public EventCallback OnSumbit { get; set; }

    [Parameter]
    public string? FormID { get; set; }

    public bool IsProcessing = false;

    ElementReference form;

    async Task SendSumbit()
    {
        IsProcessing = true;
        await form.FocusAsync();
        try
        {
            if (OnSumbit.HasDelegate)
            {
                await OnSumbit.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
        }
        IsProcessing = false;
    }
}
