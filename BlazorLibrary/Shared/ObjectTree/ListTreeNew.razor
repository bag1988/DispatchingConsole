@using BlazorLibrary.Models
@using SMDataServiceProto.V1;

<div class="row">
    <div class="col-md-6">
        <DivScroll SetClass="pe-2">
            <PHeader>
                @ForSelectTitle
            </PHeader>
            <TreeListUnlimit TItem="Google.Protobuf.WellKnownTypes.Any" Items="GetFolders" SetCurrentItem="SetCurrentItem" SelectList="SelectList" SetSelectList="SetSelectList" DbClick="AddSelected" IsSetFocus="false">
                <ContentView>
                    @if (context.Is(Objects.Descriptor) && context.TryUnpack<Objects>(out var obj))
                    {
                        <span class="oi oi-@(GetIconName(obj.Type))"></span> @obj.Name

                        @if (obj.Equals(LoadChildForFolder))
                        {
                            <span class="spinner-border spinner-border-sm ms-1" role="status" aria-hidden="true"></span>
                        }
                    }
                    else if (context.Is(CGetSitItemInfo.Descriptor) && context.TryUnpack<CGetSitItemInfo>(out var child))
                    {
                        <span class="oi oi-@(GetChildIcon(child)) ms-3"></span> @child.Name
                    }
                </ContentView>
            </TreeListUnlimit>
            <ButtonModal AddClass="text-end">
                @AddBackButons
                <div>
                    <label class="form-check-label me-1"><input type="checkbox" disabled="@(IsReadOnly?"disabled":null)" class="form-check-input" @bind="@AutoAdd" /> @GsoRep["AUTO_ADD_SELECT"]</label>
                </div>
                <div class="ms-auto">
                    @if (LoadChildForFolder != null && !IsLoadAll)
                    {
                        <BSecondary IsOutline="true">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        </BSecondary>
                    }
                    else
                    {
                        <BSecondary HotKey="@KeyCode.AddSelect" IsOutline="true" OnClick="AddSelected" IsDisabled="@(IsReadOnly || IsLoadAll || !(SelectList?.Count > 0))">
                            <span class="oi oi-caret-right me-0 ms-2"></span>
                        </BSecondary>
                        <BSecondary Text="@GsoRep["BLoad"]" HotKey="@KeyCode.AddSelectAll" IsOutline="true" OnClick="AddAll" IsDisabled="@(IsReadOnly || !(GetFolders?.Any() ?? false))">
                            <span class="oi oi-media-skip-forward me-0 ms-2"></span>
                        </BSecondary>
                    }
                </div>
            </ButtonModal>
        </DivScroll>
    </div>
    <div class="col-md-6">
        @if (AddTopContent != null)
        {
            @AddTopContent
        }
        <DivScroll SetClass="pe-2">
            <PHeader>
                @SelectTitle
            </PHeader>
            <TreeListUnlimit TItem="Google.Protobuf.WellKnownTypes.Any" Items="GetSelectFolder" SelectList="SelectListSelected" SetSelectList="SetSelectedList" DbClick="()=>RemoveSelected()" IsSetFocus="false">
                <ContentView>
                    @if (context.Is(Objects.Descriptor) && context.TryUnpack<Objects>(out var obj))
                    {
                        <span class="oi oi-@(GetIconName(obj.Type))"></span>  @obj.Name
                    }
                    else if (context.Is(CGetSitItemInfo.Descriptor) && context.TryUnpack<CGetSitItemInfo>(out var child))
                    {
                        <span class="oi oi-@(GetChildIcon(child)) ms-3"></span> @child.Name
                    }
                </ContentView>
            </TreeListUnlimit>

            <ButtonModal>
                @*Удалить все объекты из списка*@
                <BSecondary IsOutline="true" HotKey="@KeyCode.AddSelectAll" OnClick="RermoveSelectedAll" IsDisabled="@(IsReadOnly || !(SelectItems?.Count > 0))">
                    <span class="oi oi-media-skip-backward"></span>
                </BSecondary>
                @*Удаление выбранный объект из списка*@
                <BSecondary Text="@GsoRep["BLoad"]" IsOutline="true" HotKey="@KeyCode.AddSelect" OnClick="()=>RemoveSelected(true)" IsDisabled="@(IsReadOnly || !(SelectListSelected?.Any() ?? false))">
                    <span class="oi oi-caret-left"></span>
                </BSecondary>
                @AddNextButons?.Invoke(SelectItems)
            </ButtonModal>
        </DivScroll>
    </div>
</div>
@if (Abon != null)
{
    <CreateAbonent CallbackEvent="()=>{Abon=null;}" Abon="Abon" />
}
@if (IsDeleteAbon)
{
    <ModalDialog Title="@GsoRep["IDS_STRING_EDITING"]" ButtonCloseEvent="CanselDelete">
        <BodyContent>
            @if (ListObj != null && ListObj.Any())
            {
                <Cards AddClass="alert-warning" Header="@WarningDelete">
                    <ul>
                        <Virtualize Items="ListObj" Context="item">
                            <li>@item</li>
                        </Virtualize>
                    </ul>
                    <p>
                        @DeviceRep["IDS_STRING_WARNING_DELETE"]
                    </p>
                </Cards>
            }
        </BodyContent>
        <ButtonContent>
            <BEdit OnClick="()=>RemoveSelected(true)" />
            <BCancel OnClick="CanselDelete" />
        </ButtonContent>
    </ModalDialog>
}